generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POOL")
}

model app_users {
  user_id        BigInt         @id(map: "app_users_pkey1") @default(autoincrement())
  username       String         @unique
  password       String
  created_at     DateTime?      @default(now()) @db.Timestamptz(6)
  email          String?        @unique(map: "app_users_email_key1")
  name           String?        @db.VarChar
  spotify_linked Boolean        @default(false)
  activated      Boolean        @default(false)
  activation     activation[]
  preferences    preferences?
  spotify_users  spotify_users?
}

model errors {
  id          BigInt    @id @default(autoincrement())
  title       String
  description String
  resolution  String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model spotify_users {
  id              BigInt     @id(map: "app_users_pkey") @default(autoincrement())
  email           String     @unique(map: "app_users_email_key")
  name            String
  spotify_userid  String     @unique(map: "app_users_spotify_userid_key")
  country         String
  profile_pic_url String?
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  refresh_token   String
  user_id         BigInt?    @unique
  updated_at      DateTime   @default(now()) @db.Timestamptz(6)
  app_users       app_users? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model storage_tab {
  id        Int    @id @default(autoincrement())
  key       String @unique @db.VarChar
  data      String @db.VarChar
  expire_on Int
}

model activation {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  code       String    @db.VarChar
  expires    DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  app_users  app_users @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model preferences {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt    @unique
  top        Boolean   @default(true)
  current    Boolean   @default(true)
  recent     Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  account    Boolean   @default(true)
  app_users  app_users @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
