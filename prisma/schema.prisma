generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_MIGRATE")
}

model app_users {
  user_id         BigInt    @id(map: "app_users_pkey1") @default(autoincrement())
  username        String    @unique
  password        String?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  email           String?   @unique(map: "app_users_email_key1")
  name            String?   @db.VarChar
  num_of_visitors BigInt    @default(0)

  preferences   preferences?
  spotify_users spotify_users?
}

model spotify_users {
  id              BigInt     @id(map: "app_users_pkey") @default(autoincrement())
  email           String     @unique(map: "app_users_email_key")
  name            String
  spotify_userid  String     @unique(map: "app_users_spotify_userid_key")
  country         String
  profile_pic_url String?
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  refresh_token   String
  user_id         BigInt?    @unique
  updated_at      DateTime   @default(now()) @db.Timestamptz(6)
  app_users       app_users? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

model preferences {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt    @unique
  top        Boolean   @default(true)
  current    Boolean   @default(true)
  recent     Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  account    Boolean   @default(true)
  app_users  app_users @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
}

// LUCIA RELATED TABLES (https://lucia-auth.com/database/prisma)
model User {
  id       String    @id
  sessions Session[]
}

model Session {
  id              String   @id
  userId          String   @db.VarChar(255)
  username        String
  user_id         Int
  spotify_user_id String
  expiresAt       DateTime
  user            User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
